AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECS Service and Task Definition for Packulator application'

Parameters:
  ApplicationName:
    Type: String
    Default: packulator
    Description: Name of the application
  
  Environment:
    Type: String
    Default: prod
    AllowedValues: [dev, staging, prod]
    Description: Environment name
  
  ImageURI:
    Type: String
    Description: ECR Image URI
  
  DBHost:
    Type: String
    Description: Database host
  
  DBName:
    Type: String
    Default: packulator
    Description: Database name
  
  DBUser:
    Type: String
    Default: packulator_user
    Description: Database username
  
  DBPassword:
    Type: String
    NoEcho: true
    Description: Database password

Resources:
  # IAM Role for ECS Task Execution
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ApplicationName}-${Environment}-ecs-execution-role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: ECRAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # IAM Role for ECS Task
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ApplicationName}-${Environment}-ecs-task-role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: 
                  - !Sub 
                    - '${BucketArn}/*'
                    - BucketArn: 
                        Fn::ImportValue: !Sub ${ApplicationName}-${Environment}-s3-bucket-arn
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  Fn::ImportValue: !Sub ${ApplicationName}-${Environment}-s3-bucket-arn

  # CloudWatch Log Group
  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${ApplicationName}-${Environment}
      RetentionInDays: 30

  # ECS Task Definition
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${ApplicationName}-${Environment}
      Cpu: 512
      Memory: 1024
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: !Sub ${ApplicationName}-container
          Image: !Ref ImageURI
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          Environment:
            - Name: APP_ENV
              Value: !Ref Environment
            - Name: DB_HOST
              Value: !Ref DBHost
            - Name: DB_PORT
              Value: '5432'
            - Name: DB_NAME
              Value: !Ref DBName
            - Name: DB_USER
              Value: !Ref DBUser
            - Name: DB_PASSWORD
              Value: !Ref DBPassword
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          HealthCheck:
            Command:
              - CMD-SHELL
              - 'curl -f http://localhost:8080/health/check || exit 1'
            Interval: 30
            Timeout: 10
            Retries: 3
            StartPeriod: 60

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      ServiceName: !Sub ${ApplicationName}-${Environment}-service
      Cluster:
        Fn::ImportValue: !Sub ${ApplicationName}-${Environment}-cluster-name
      TaskDefinition: !Ref ECSTaskDefinition
      DesiredCount: 2
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - Fn::ImportValue: !Sub ${ApplicationName}-${Environment}-ecs-sg
          Subnets:
            - Fn::ImportValue: !Sub ${ApplicationName}-${Environment}-private-subnet-1
            - Fn::ImportValue: !Sub ${ApplicationName}-${Environment}-private-subnet-2
      LoadBalancers:
        - ContainerName: !Sub ${ApplicationName}-container
          ContainerPort: 8080
          TargetGroupArn:
            Fn::ImportValue: !Sub ${ApplicationName}-${Environment}-target-group-arn
      HealthCheckGracePeriodSeconds: 300
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true

  # Auto Scaling Target
  ECSAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 2
      ResourceId: !Sub service/${ApplicationName}-${Environment}-cluster/${ApplicationName}-${Environment}-service
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  # Auto Scaling Policy - CPU
  ECSAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${ApplicationName}-${Environment}-cpu-scaling
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70
        ScaleInCooldown: 300
        ScaleOutCooldown: 300

Outputs:
  ECSServiceArn:
    Description: ECS Service ARN
    Value: !Ref ECSService
    Export:
      Name: !Sub ${ApplicationName}-${Environment}-ecs-service-arn

  ECSTaskDefinitionArn:
    Description: ECS Task Definition ARN
    Value: !Ref ECSTaskDefinition
    Export:
      Name: !Sub ${ApplicationName}-${Environment}-task-definition-arn