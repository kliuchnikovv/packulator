// Code generated by MockGen. DO NOT EDIT.
// Source: pack.go
//
// Generated by this command:
//
//	mockgen -source=pack.go -destination=mocks/pack.go -typed
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	model "github.com/kliuchnikovv/packulator/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockPackService is a mock of PackService interface.
type MockPackService struct {
	ctrl     *gomock.Controller
	recorder *MockPackServiceMockRecorder
	isgomock struct{}
}

// MockPackServiceMockRecorder is the mock recorder for MockPackService.
type MockPackServiceMockRecorder struct {
	mock *MockPackService
}

// NewMockPackService creates a new mock instance.
func NewMockPackService(ctrl *gomock.Controller) *MockPackService {
	mock := &MockPackService{ctrl: ctrl}
	mock.recorder = &MockPackServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackService) EXPECT() *MockPackServiceMockRecorder {
	return m.recorder
}

// CreatePacks mocks base method.
func (m *MockPackService) CreatePacks(ctx context.Context, packs ...int64) (string, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range packs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePacks", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePacks indicates an expected call of CreatePacks.
func (mr *MockPackServiceMockRecorder) CreatePacks(ctx any, packs ...any) *MockPackServiceCreatePacksCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, packs...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePacks", reflect.TypeOf((*MockPackService)(nil).CreatePacks), varargs...)
	return &MockPackServiceCreatePacksCall{Call: call}
}

// MockPackServiceCreatePacksCall wrap *gomock.Call
type MockPackServiceCreatePacksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPackServiceCreatePacksCall) Return(arg0 string, arg1 error) *MockPackServiceCreatePacksCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPackServiceCreatePacksCall) Do(f func(context.Context, ...int64) (string, error)) *MockPackServiceCreatePacksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPackServiceCreatePacksCall) DoAndReturn(f func(context.Context, ...int64) (string, error)) *MockPackServiceCreatePacksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeletePack mocks base method.
func (m *MockPackService) DeletePack(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePack", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePack indicates an expected call of DeletePack.
func (mr *MockPackServiceMockRecorder) DeletePack(ctx, id any) *MockPackServiceDeletePackCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePack", reflect.TypeOf((*MockPackService)(nil).DeletePack), ctx, id)
	return &MockPackServiceDeletePackCall{Call: call}
}

// MockPackServiceDeletePackCall wrap *gomock.Call
type MockPackServiceDeletePackCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPackServiceDeletePackCall) Return(arg0 error) *MockPackServiceDeletePackCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPackServiceDeletePackCall) Do(f func(context.Context, string) error) *MockPackServiceDeletePackCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPackServiceDeletePackCall) DoAndReturn(f func(context.Context, string) error) *MockPackServiceDeletePackCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPackByHash mocks base method.
func (m *MockPackService) GetPackByHash(ctx context.Context, hash string) (*model.Pack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackByHash", ctx, hash)
	ret0, _ := ret[0].(*model.Pack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackByHash indicates an expected call of GetPackByHash.
func (mr *MockPackServiceMockRecorder) GetPackByHash(ctx, hash any) *MockPackServiceGetPackByHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackByHash", reflect.TypeOf((*MockPackService)(nil).GetPackByHash), ctx, hash)
	return &MockPackServiceGetPackByHashCall{Call: call}
}

// MockPackServiceGetPackByHashCall wrap *gomock.Call
type MockPackServiceGetPackByHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPackServiceGetPackByHashCall) Return(arg0 *model.Pack, arg1 error) *MockPackServiceGetPackByHashCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPackServiceGetPackByHashCall) Do(f func(context.Context, string) (*model.Pack, error)) *MockPackServiceGetPackByHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPackServiceGetPackByHashCall) DoAndReturn(f func(context.Context, string) (*model.Pack, error)) *MockPackServiceGetPackByHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPackByID mocks base method.
func (m *MockPackService) GetPackByID(ctx context.Context, id string) (*model.Pack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackByID", ctx, id)
	ret0, _ := ret[0].(*model.Pack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackByID indicates an expected call of GetPackByID.
func (mr *MockPackServiceMockRecorder) GetPackByID(ctx, id any) *MockPackServiceGetPackByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackByID", reflect.TypeOf((*MockPackService)(nil).GetPackByID), ctx, id)
	return &MockPackServiceGetPackByIDCall{Call: call}
}

// MockPackServiceGetPackByIDCall wrap *gomock.Call
type MockPackServiceGetPackByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPackServiceGetPackByIDCall) Return(arg0 *model.Pack, arg1 error) *MockPackServiceGetPackByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPackServiceGetPackByIDCall) Do(f func(context.Context, string) (*model.Pack, error)) *MockPackServiceGetPackByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPackServiceGetPackByIDCall) DoAndReturn(f func(context.Context, string) (*model.Pack, error)) *MockPackServiceGetPackByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListPacks mocks base method.
func (m *MockPackService) ListPacks(ctx context.Context) ([]model.Pack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPacks", ctx)
	ret0, _ := ret[0].([]model.Pack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPacks indicates an expected call of ListPacks.
func (mr *MockPackServiceMockRecorder) ListPacks(ctx any) *MockPackServiceListPacksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPacks", reflect.TypeOf((*MockPackService)(nil).ListPacks), ctx)
	return &MockPackServiceListPacksCall{Call: call}
}

// MockPackServiceListPacksCall wrap *gomock.Call
type MockPackServiceListPacksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPackServiceListPacksCall) Return(arg0 []model.Pack, arg1 error) *MockPackServiceListPacksCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPackServiceListPacksCall) Do(f func(context.Context) ([]model.Pack, error)) *MockPackServiceListPacksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPackServiceListPacksCall) DoAndReturn(f func(context.Context) ([]model.Pack, error)) *MockPackServiceListPacksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
