// Code generated by MockGen. DO NOT EDIT.
// Source: pack.go
//
// Generated by this command:
//
//	mockgen -source=pack.go -destination=mocks/pack.go -typed
//

// Package mock_store is a generated GoMock package.
package mock_store

import (
	context "context"
	reflect "reflect"

	model "github.com/kliuchnikovv/packulator/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// DeletePack mocks base method.
func (m *MockStore) DeletePack(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePack", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePack indicates an expected call of DeletePack.
func (mr *MockStoreMockRecorder) DeletePack(ctx, id any) *MockStoreDeletePackCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePack", reflect.TypeOf((*MockStore)(nil).DeletePack), ctx, id)
	return &MockStoreDeletePackCall{Call: call}
}

// MockStoreDeletePackCall wrap *gomock.Call
type MockStoreDeletePackCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreDeletePackCall) Return(arg0 error) *MockStoreDeletePackCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreDeletePackCall) Do(f func(context.Context, string) error) *MockStoreDeletePackCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreDeletePackCall) DoAndReturn(f func(context.Context, string) error) *MockStoreDeletePackCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPackByHash mocks base method.
func (m *MockStore) GetPackByHash(ctx context.Context, hash string) (*model.Pack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackByHash", ctx, hash)
	ret0, _ := ret[0].(*model.Pack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackByHash indicates an expected call of GetPackByHash.
func (mr *MockStoreMockRecorder) GetPackByHash(ctx, hash any) *MockStoreGetPackByHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackByHash", reflect.TypeOf((*MockStore)(nil).GetPackByHash), ctx, hash)
	return &MockStoreGetPackByHashCall{Call: call}
}

// MockStoreGetPackByHashCall wrap *gomock.Call
type MockStoreGetPackByHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreGetPackByHashCall) Return(arg0 *model.Pack, arg1 error) *MockStoreGetPackByHashCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreGetPackByHashCall) Do(f func(context.Context, string) (*model.Pack, error)) *MockStoreGetPackByHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreGetPackByHashCall) DoAndReturn(f func(context.Context, string) (*model.Pack, error)) *MockStoreGetPackByHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPackByID mocks base method.
func (m *MockStore) GetPackByID(ctx context.Context, id string) (*model.Pack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackByID", ctx, id)
	ret0, _ := ret[0].(*model.Pack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackByID indicates an expected call of GetPackByID.
func (mr *MockStoreMockRecorder) GetPackByID(ctx, id any) *MockStoreGetPackByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackByID", reflect.TypeOf((*MockStore)(nil).GetPackByID), ctx, id)
	return &MockStoreGetPackByIDCall{Call: call}
}

// MockStoreGetPackByIDCall wrap *gomock.Call
type MockStoreGetPackByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreGetPackByIDCall) Return(arg0 *model.Pack, arg1 error) *MockStoreGetPackByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreGetPackByIDCall) Do(f func(context.Context, string) (*model.Pack, error)) *MockStoreGetPackByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreGetPackByIDCall) DoAndReturn(f func(context.Context, string) (*model.Pack, error)) *MockStoreGetPackByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HealthCheck mocks base method.
func (m *MockStore) HealthCheck(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockStoreMockRecorder) HealthCheck(ctx any) *MockStoreHealthCheckCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockStore)(nil).HealthCheck), ctx)
	return &MockStoreHealthCheckCall{Call: call}
}

// MockStoreHealthCheckCall wrap *gomock.Call
type MockStoreHealthCheckCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreHealthCheckCall) Return(arg0 error) *MockStoreHealthCheckCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreHealthCheckCall) Do(f func(context.Context) error) *MockStoreHealthCheckCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreHealthCheckCall) DoAndReturn(f func(context.Context) error) *MockStoreHealthCheckCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListPacks mocks base method.
func (m *MockStore) ListPacks(ctx context.Context) ([]model.Pack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPacks", ctx)
	ret0, _ := ret[0].([]model.Pack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPacks indicates an expected call of ListPacks.
func (mr *MockStoreMockRecorder) ListPacks(ctx any) *MockStoreListPacksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPacks", reflect.TypeOf((*MockStore)(nil).ListPacks), ctx)
	return &MockStoreListPacksCall{Call: call}
}

// MockStoreListPacksCall wrap *gomock.Call
type MockStoreListPacksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreListPacksCall) Return(arg0 []model.Pack, arg1 error) *MockStoreListPacksCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreListPacksCall) Do(f func(context.Context) ([]model.Pack, error)) *MockStoreListPacksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreListPacksCall) DoAndReturn(f func(context.Context) ([]model.Pack, error)) *MockStoreListPacksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SavePack mocks base method.
func (m *MockStore) SavePack(ctx context.Context, pack *model.Pack) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePack", ctx, pack)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePack indicates an expected call of SavePack.
func (mr *MockStoreMockRecorder) SavePack(ctx, pack any) *MockStoreSavePackCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePack", reflect.TypeOf((*MockStore)(nil).SavePack), ctx, pack)
	return &MockStoreSavePackCall{Call: call}
}

// MockStoreSavePackCall wrap *gomock.Call
type MockStoreSavePackCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreSavePackCall) Return(arg0 error) *MockStoreSavePackCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreSavePackCall) Do(f func(context.Context, *model.Pack) error) *MockStoreSavePackCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreSavePackCall) DoAndReturn(f func(context.Context, *model.Pack) error) *MockStoreSavePackCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SavePacks mocks base method.
func (m *MockStore) SavePacks(ctx context.Context, packs ...model.Pack) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range packs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SavePacks", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePacks indicates an expected call of SavePacks.
func (mr *MockStoreMockRecorder) SavePacks(ctx any, packs ...any) *MockStoreSavePacksCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, packs...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePacks", reflect.TypeOf((*MockStore)(nil).SavePacks), varargs...)
	return &MockStoreSavePacksCall{Call: call}
}

// MockStoreSavePacksCall wrap *gomock.Call
type MockStoreSavePacksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoreSavePacksCall) Return(arg0 error) *MockStoreSavePacksCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoreSavePacksCall) Do(f func(context.Context, ...model.Pack) error) *MockStoreSavePacksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoreSavePacksCall) DoAndReturn(f func(context.Context, ...model.Pack) error) *MockStoreSavePacksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
